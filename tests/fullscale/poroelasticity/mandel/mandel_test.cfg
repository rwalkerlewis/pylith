[pylithapp]

#
#  y
#  ^
#  |
#   --> x
#
#          2*-1000 Pa
#         ----------
#         |        |
# Ux=-a   |        | Ux=+a
#         |        |
#         |        |
#         ----------
#          2*1000 Pa
#
# Dirichlet boundary conditions
#
# boundary_yneg: Uy(x,-16*m) = 0
# boundary_xneg: Ux(-6*m,y) = -a
# boundary_xpos: Uy(+6*m,y) = +a

# File with version information and parameters (including defaults).
#
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/mandel.json

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = mandel

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
# Turn on some journals to show progress.
[pylithapp.journal.info]
timedependent = 1
solution = 1
meshio = 1

[pylithapp.journal.debug]
#timedependent = 1
#solution = 1
#outputitegrator = 1
#dirichlettimedependent = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
#[pylithapp.mesh_generator]
## Set the reader to match the type of mesh file.
#reader = pylith.meshio.MeshIOAscii

[pylithapp.mesh_generator]
reader = pylith.meshio.MeshIOCubit

[pylithapp.mesh_generator.reader]
filename = mesh_quad.exo


# Set the filename and the dimension of the Cartesian coordinate system.
#reader.filename = quad.mesh
coordsys.space_dim = 2

# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
[pylithapp.problem]
# Use the nonlinear solver to verify residual and Jacobian are consistent.
solver = nonlinear

# Quasistatic problems do not have a well-defined density (inertia)
# scale. For this static simulation, we adjust the time scale and time
# step to give a density scale close to unity.
#initial_dt = 0.1*s
##start_time = 0.0*s
#total_time = 1.0*s
#normalizer.relaxation_time = 1.0*s

#gravity_field = spatialdata.spatialdb.GravityField
#gravity_field.gravity_dir = [0.0, -1.0, 0.0]
 
# We use the predefined container with displacement and pressure (mean
# compressive stress) subfields for the solution field.
solution = pylith.problems.SolnDispPresTracStrain
normalizer.length_scale = 1.0*m
normalizer.relaxation_time = 1.0*s
#normalizer.density_scale = 1000*m**-3*kg


[pylithapp.timedependent]
initial_dt = 1.0*s
start_time = 0.0*s
end_time = 25.0*s
# Set the discretization and integration for each of the solution subfields.
#
# IMPORTANT: The quadrature order *must* the same for all solution and
# auxiliary subfields. PyLith will verify that this requirement is met.
# This requirement may be relaxed in the future.
[pylithapp.problem.solution.subfields.displacement]
basis_order = 1
quadrature_order = 2

[pylithapp.problem.solution.subfields.pressure]
basis_order = 1
quadrature_order = 2

[pylithapp.problem.solution.subfields.trace_strain]
basis_order = 1
quadrature_order = 2


[pylithapp.problem]
solution_observers = [domain]

[pylithapp.problem.solution_observers.domain]
field_filter = pylith.meshio.FieldFilterProject


[pylithapp.problem.solution_observers.domain]
writer.filename = output/mandel-domain.h5

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.problem]
materials = [poroelastic]

[pylithapp.problem.materials]
poroelastic = pylith.materials.Poroelasticity
poroelastic.bulk_rheology = pylith.materials.IsotropicLinearPoroelasticity

[pylithapp.problem.materials.poroelastic]
label = Poroelastic material 
id = 1

db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Poroelastic properties
db_auxiliary_field.values = [porosity,      density, fluid_density, fluid_viscosity, shear_modulus, bulk_modulus, biot_coefficient, isotropic_permeability, fluid_bulk_modulus]
db_auxiliary_field.data   = [     0.1, 2500*kg/m**3,  1000*kg/m**3,      0.001*Pa*s,      0.4e9*Pa,     0.7e9*Pa,              0.8,          10.0e-14*m**2,             2e9*Pa]

observers.observer.field_filter = pylith.meshio.FieldFilterProject

auxiliary_subfields.porosity.basis_order = 0
auxiliary_subfields.porosity.quadrature_order = 2

auxiliary_subfields.density.basis_order = 0
auxiliary_subfields.density.quadrature_order = 2

auxiliary_subfields.fluid_density.basis_order = 0
auxiliary_subfields.fluid_density.quadrature_order = 2

auxiliary_subfields.fluid_viscosity.basis_order = 0
auxiliary_subfields.fluid_viscosity.quadrature_order = 2

auxiliary_subfields.gravitational_acceleration.basis_order = 0
auxiliary_subfields.gravitational_acceleration.quadrature_order = 2

bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.quadrature_order = 2

bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.quadrature_order = 2

bulk_rheology.auxiliary_subfields.biot_coefficient.basis_order = 0
bulk_rheology.auxiliary_subfields.biot_coefficient.quadrature_order = 2

bulk_rheology.auxiliary_subfields.isotropic_permeability.basis_order = 0
bulk_rheology.auxiliary_subfields.isotropic_permeability.quadrature_order = 2

bulk_rheology.auxiliary_subfields.fluid_bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.fluid_bulk_modulus.quadrature_order = 2

derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_strain.quadrature_order = 2

derived_subfields.cauchy_stress.basis_order = 1
derived_subfields.cauchy_stress.quadrature_order = 2

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
bc = [x_neg,x_pos,y_neg,y_pos]

bc.x_pos = pylith.bc.DirichletTimeDependent
bc.x_neg = pylith.bc.DirichletTimeDependent
bc.y_neg = pylith.bc.NeumannTimeDependent
bc.y_pos = pylith.bc.NeumannTimeDependent
# ------------------------------------------------------------------------------
[pylithapp.problem.bc.x_pos]
constrained_dof = [0]
label = edge_xpos
field = pressure
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on +x boundary

auxiliary_subfields.initial_amplitude.quadrature_order = 2
observers.observer.writer.filename = output/mandel-bc_xpos.h5

# ------------------------------------------------------------------------------
[pylithapp.problem.bc.x_neg]
constrained_dof = [0]
label = edge_xneg
field = pressure
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on -x boundary

auxiliary_subfields.initial_amplitude.quadrature_order = 2
observers.observer.writer.filename = output/mandel-bc_xneg.h5
# ------------------------------------------------------------------------------
[pylithapp.problem.bc.y_neg]
#constrained_dof = [0]
label = edge_yneg
field = displacement
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Neumann BC -y edge

db_auxiliary_field.values = [initial_amplitude_tangential, initial_amplitude_normal]
db_auxiliary_field.data = [0.0*MPa, 1.0*MPa]

auxiliary_subfields.initial_amplitude.basis_order = 0
auxiliary_subfields.initial_amplitude.quadrature_order = 2

observers.observer.writer.filename = output/mandel-bc_ypos.h5
#observers.observer.data_fields = [pressure]

# ------------------------------------------------------------------------------
[pylithapp.problem.bc.y_pos]
#constrained_dof = [0]
label = edge_ypos
field = displacement
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Neumann BC +y edge

db_auxiliary_field.values = [initial_amplitude_tangential, initial_amplitude_normal]
db_auxiliary_field.data = [0.0*MPa, -1.0*MPa]

auxiliary_subfields.initial_amplitude.basis_order = 0
auxiliary_subfields.initial_amplitude.quadrature_order = 2

observers.observer.writer.filename = output/mandel-bc_ypos.h5
#observers.observer.data_fields = [pressure]


# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.petsc]


pc_type = ilu
# Fieldsplit
#pc_type = fieldsplit
#pc_fieldsplit_type=multiplicative
#pc_fieldsplit_displacement_fields=1
#pc_fieldsplit_pore_pressure_fields=0
#pc_fieldsplit_trace_strain_fields=2
#fieldsplit_displacement_pc_type=ml
#fieldsplit_pore_pressure_pc_type=ml
#fieldsplit_trace_strain_pc_type=jacobi
#fieldsplit_trace_strain_ksp_rtol=1e-9

# KSP
ksp_rtol = 1.0e-8
ksp_atol = 1.0e-12
ksp_max_it = 1000
ksp_gmres_restart = 200
ksp_error_if_not_converged = false
#ksp_view = true
ksp_monitor = true
ksp_converged_reason = true


# SNES
#snes_type = newtonls
#snes_linesearch_type = cp
snes_rtol = 1.0e-08
snes_atol = 1.0e-08
snes_error_if_not_converged = false
#snes_view = true
snes_monitor = true
snes_converged_reason = true
snes_linesearch_monitor = true

# TS
ts_monitor = true
ts_type = beuler
#ts_max_snes_failures = -1
#pc_type = ilu

#ksp_rtol = 1.0e-8
#ksp_atol = 1.0e-12
#ksp_max_it = 1000
#ksp_gmres_restart = 50
#ksp_error_if_not_converged = false

#snes_rtol = 1.0e-10
#snes_atol = 1.0e-10
#snes_error_if_not_converged = false

## Monitors for debugging
#ts_monitor = true
#ksp_monitor = true
#ksp_converged_reason = true
#snes_monitor = true
#snes_converged_reason = true
#snes_linesearch_monitor = true

#ksp_view = true
#snes_view = true


# End of file
