# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
[pylithapp.problem.solution.subfields.displacement]
basis_order = 1

[pylithapp.problem.solution.subfields.pressure]
basis_order = 1

[pylithapp.problem.solution.subfields.trace_strain]
basis_order = 1

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.problem]
# Create an array of one material
materials = [poroelastic]
materials.poroelastic = pylith.materials.Poroelasticity

[pylithapp.problem.materials.poroelastic]
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Poroelastic properties
db_auxiliary_field.values = [solid_density, fluid_density, fluid_viscosity, shear_modulus, undrained_bulk_modulus, biot_coefficient,         biot_modulus, isotropic_permeability]
db_auxiliary_field.data   = [ 2500*kg/m**3,  1000*kg/m**3,        1.0*Pa*s,        0.75*Pa, 2.6941176470588233*Pa,              0.6, 4.705882352941176*Pa,               1.5*m**2]

# ----------------------------------------------------------------------
# initial conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
ic = [domain]

ic.domain.db = spatialdata.spatialdb.SimpleDB
ic.domain.db.label = Initial conditions for domain
ic.domain.db.iohandler.filename = mandel_ic.spatialdb
ic.domain.db.query_type = linear

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
bc = [x_neg,x_pos,y_neg,y_pos]

bc.x_pos = pylith.bc.DirichletTimeDependent
bc.x_neg = pylith.bc.DirichletTimeDependent
bc.y_neg = pylith.bc.DirichletTimeDependent
bc.y_pos = pylith.bc.NeumannTimeDependent
# ------------------------------------------------------------------------------
[pylithapp.problem.bc.x_pos]
# Set Ux=+2.0*m on the +x boundary.
constrained_dof = [0]
label = x_pos
field = pressure
# The spatial database must contain both components even though we do
# not constrain the y component.
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on +x boundary
observers.observer.field_filter = pylith.meshio.FieldFilterProject
observers.observer.data_fields = [displacement, pressure, trace_strain]
# ------------------------------------------------------------------------------
[pylithapp.problem.bc.x_neg]
constrained_dof = [0]
label = x_neg
field = displacement
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on -x boundary
observers.observer.field_filter = pylith.meshio.FieldFilterProject
observers.observer.data_fields = [displacement, pressure, trace_strain]

# ------------------------------------------------------------------------------
[pylithapp.problem.bc.y_pos]
label = y_pos
field = displacement
scale_name = pressure
use_initial = True
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Neumann BC on -y boundary

db_auxiliary_field.values = [initial_amplitude_tangential, initial_amplitude_normal]
db_auxiliary_field.data = [0.0*Pa, +1.0*Pa]

auxiliary_subfields.initial_amplitude.basis_order = 1
observers.observer.field_filter = pylith.meshio.FieldFilterProject
observers.observer.data_fields = [displacement, pressure, trace_strain]
# ------------------------------------------------------------------------------
[pylithapp.problem.bc.y_neg]
constrained_dof = [1]
label = y_neg
field = displacement
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on -y boundary
observers.observer.field_filter = pylith.meshio.FieldFilterProject
observers.observer.data_fields = [displacement, pressure, trace_strain]
# End of file
